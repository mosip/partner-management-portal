
name: Maven Package upon a push 

on:
  push:
    branches:
      - develop
  
jobs:

  build-pmp-ui:
    runs-on: ubuntu-latest
    env: 
      NAMESPACE: ${{ secrets. dev_namespace_docker_hub }}
      SERVICE_NAME: pmp-ui
      SERVICE_LOCATION: pmp-ui

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        
      - name: npm install
        run: cd ${{ env.SERVICE_LOCATION }} && npm install --ignore-scripts
      
      - name: npm build
        run: cd ${{ env.SERVICE_LOCATION }} && npm run-script build -- --prod --base-href . --output-path=dist
      
      - name: Setup branch and env 
        run: |
         # Strip git ref prefix from version
         echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
         echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
      - name: setup environment
        run: |
          # Strip git ref prefix from version
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: run sonar analysis
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          echo "sonar.host.url=https://sonarcloud.io/
               sonar.login=${{ secrets.SONAR_TOKEN }}
               sonar.projectKey=mosip_${{ github.event.repository.name }}
               sonar.organization=${{ secrets.ORG_KEY }}
               sonar.sourceEncoding=UTF-8
               sonar.sources=src
               sonar.exclusions=**/node_modules/**
               sonar.tests=src
               sonar.test.inclusions=**/*.spec.ts
               sonar.typescript.lcov.reportPaths=coverage/lcov.info" >> sonar-project.properties
          npm install sonar-scanner && npm run sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo "push version $VERSION"
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled.

  Sonar_Analysis:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets. dev_namespace_docker_hub }}
      SERVICE_NAME: admin-ui
      SERVICE_LOCATION: admin-ui

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1

      - name: npm install
        run: cd ${{ env.SERVICE_LOCATION }} && npm install --ignore-scripts

      - name: npm build
        run: cd ${{ env.SERVICE_LOCATION }} && npm run-script build -- --prod --base-href . --output-path=dist

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
      - name: setup environment
        run: |
          # Strip git ref prefix from version
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
      - name: run sonar analysis
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          echo "sonar.host.url=https://sonarcloud.io/
               sonar.login=${{ secrets.SONAR_TOKEN }}
               sonar.projectKey=mosip_admin-ui
               sonar.organization=${{ secrets.ORG_KEY }}
               sonar.sourceEncoding=UTF-8
               sonar.sources=src
               sonar.exclusions=**/node_modules/**
               sonar.tests=src
               sonar.test.inclusions=**/*.spec.ts
               sonar.typescript.lcov.reportPaths=coverage/lcov.info" >> sonar-project.properties
          npm install sonar-scanner && npm run sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

        - uses: 8398a7/action-slack@v3
          with:
            status: ${{ job.status }}
            fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
          if: failure() # Pick up events even if the job fails or is canceled.